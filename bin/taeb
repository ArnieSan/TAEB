#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use Getopt::Long;

sub print_usage {
    my ($exit_val) = shift;

    print STDERR <<"USAGE";
TAEB - the Tactical Amulet Extraction Bot
Options:
    --rc         Print TAEB's required nethackrc to stdout
    --loop       Run TAEB repeatedly
    --help       Print this message
USAGE
    exit $exit_val;
}

my $loop = 0;
my %cmdline_options = ('loop' => \$loop);
my @getopt_specifiers = qw/rc help|h/;
my $getopts_parser = new Getopt::Long::Parser;

$getopts_parser->getoptions(\%cmdline_options, @getopt_specifiers)
  or print_usage(1);

if (exists($cmdline_options{help})) {
	print_usage(0);
}

if (exists($cmdline_options{rc})) {
    require TAEB::Config;
    print TAEB::Config->nethackrc_contents;
    exit 0;
}

require TAEB;

my $tstp = $SIG{TSTP} = sub {
    # if we don't invoke TSTP then we won't be suspended
    $SIG{TSTP} = 'DEFAULT';

    TAEB->display->deinitialize;

    kill TSTP => $$;
};

$SIG{CONT} = sub {
    $SIG{TSTP} = $tstp;

    TAEB->display->reinitialize;
};

$SIG{TERM} = sub {
    $SIG{TERM} = 'DEFAULT';

    TAEB->display->deinitialize;

    kill TERM => $$;
};

$| = 1;

while (1) {
    eval {
        local $SIG{INT} = sub { die "Interrupted.\n"; $loop = 0 };
        my $report = TAEB->play;
        print $report;
    };

    last unless $loop;

    TAEB->reset_state;

    print ' ';
    for (reverse 1..5) {
        print "\b$_";
        sleep 1;
    }
}

