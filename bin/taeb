#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use Getopt::Whatever;
use Term::ReadKey;

use TAEB;
use TAEB::Config;

# load config {{{
my %config_args;
$config_args{file} = $ARGV{config}
    if exists $ARGV{config};
my $config = TAEB::Config->new(%config_args);
# }}}
# load_from_argv {{{
sub load_from_argv {
    my $second_level = shift;
    my $default = shift;
    my $arg_name = lc($second_level);
    $arg_name =~ s/.*:://;

    my $third_level = $ARGV{$arg_name}
                   || $config->contents->{$arg_name}
                   || $default;

    my $type = "TAEB::${second_level}::$third_level";

    eval "require $type; 1"
        or die $@;

    my %opts = %{ $config->contents->{ $arg_name.'_options' }->{ $third_level } || {} };
    return $type->new(%opts, @_);
}
# }}}

my $interface   = load_from_argv('Interface', 'Local');
my $personality = load_from_argv('AI::Personality', 'RandomWalk');

TAEB->interface($interface);
TAEB->personality($personality);
TAEB->config($config);

if (TAEB->config->contents->{debug_personality}) {
    my $action_weight = TAEB->personality->sort_behaviors;

    die "Personality has no behaviors.\n"
        unless keys %$action_weight;

    for my $action (sort {$action_weight->{$b}[0] <=> $action_weight->{$a}[0]} keys %$action_weight) {
        my ($urgency, $unweighted, $weight, $behavior) = @{ $action_weight->{$action} };
        printf "%10d  %s (%s)\n", $urgency, $action, $behavior;
    }

    exit 0;
}

# signal and terminal munging {{{
$SIG{__WARN__} = sub { TAEB->warning(@_) };
$SIG{__DIE__} = sub {
    return if "@_ $_" =~ /Game over, man/;
    require Carp::REPL;
    ReadMode 0;
    print "\ec";
    warn "@_";
    Carp::REPL::repl(@_);
} if $config->contents->{carp_repl};

$| = 1;
ReadMode 3;
END { ReadMode 0 }
# }}}

while (1) {
    TAEB->step;
    my $c = ReadKey(TAEB->read_wait);
    if (defined $c) {
        my $out = TAEB->keypress($c);
        if (defined $out) {
            TAEB->out("\e[2H\e[44m$out");
            sleep 3;
            TAEB->out(TAEB->redraw);
        }
    }
}

